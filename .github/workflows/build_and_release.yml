name: Build and Release

on:
  push:
    tags:
      - 'v*'
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write
  packages: write

jobs:
  build-and-upload:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: arm64
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: arm64
          - os: windows-latest
            arch: x86_64

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: Build with PyInstaller
      run: pyinstaller ParticlePlayground.spec

    - name: Rename artifacts
      run: |
        cd dist
        main_file=$(ls ParticlePlayground* | grep -v "LICENSE")
        new_name="ParticlePlayground_${{ matrix.os }}-${{ matrix.arch }}${main_file##ParticlePlayground}"
        mv "$main_file" "$new_name"
      shell: bash

    - name: Install GitHub CLI
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
        elif [ "${{ runner.os }}" = "macOS" ]; then
          brew install gh
        else
          choco install gh
        fi
      shell: bash

    - name: Upload artifact to release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          release_tag="${GITHUB_REF#refs/tags/}"
        else
          release_tag="nightly"
        fi

        if ! gh release view "$release_tag" &>/dev/null; then
          gh release create "$release_tag" --title "Release $release_tag" --notes "Placeholder for release notes" --prerelease
        fi

        gh release upload "$release_tag" dist/ParticlePlayground_* --clobber
      shell: bash

  create-release:
    needs: build-and-upload
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Generate SHA256SUMS
      run: |
        mkdir artifacts
        gh release download $(if [[ $GITHUB_REF == refs/tags/* ]]; then echo "${GITHUB_REF#refs/tags/}"; else echo "nightly"; fi) -D artifacts
        cd artifacts
        sha256sum * > SHA256SUMS
        mv SHA256SUMS ..
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate Release Notes
      id: release_notes
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          release_tag="${GITHUB_REF#refs/tags/}"
          previous_tag=$(git describe --tags --abbrev=0 $release_tag^ 2>/dev/null || echo '')
          if [ -z "$previous_tag" ]; then
            commit_range=$(git rev-list --max-parents=0 HEAD)..${release_tag}
          else
            commit_range=$previous_tag..$release_tag
          fi
        else
          release_tag="nightly"
          previous_nightly=$(git describe --tags --match "nightly" --abbrev=0 2>/dev/null || echo '')
          if [ -z "$previous_nightly" ]; then
            exit 0  # No previous nightly, no need to create a new one
          fi
          commit_range=$previous_nightly..HEAD
        fi

        echo "# Release Commit Summary" > RELEASE_NOTES.md
        git log --reverse --format="[%h] %s" $commit_range >> RELEASE_NOTES.md
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      shell: bash

    - name: Update Release
      if: steps.release_notes.outputs.release_notes != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          release_tag="${GITHUB_REF#refs/tags/}"
          is_prerelease=false
        else
          release_tag="nightly"
          is_prerelease=true
        fi

        gh release edit "$release_tag" --notes "${{ steps.release_notes.outputs.release_notes }}" --prerelease=$is_prerelease
        gh release upload "$release_tag" SHA256SUMS --clobber

        if [[ "$release_tag" == "nightly" ]]; then
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -f nightly
          git push origin nightly -f
        fi

  cleanup:
    runs-on: ubuntu-latest
    needs: create-release
    if: always()
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install GitHub CLI
      run: |
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        sudo apt update
        sudo apt install gh -y

    - name: Remove invalid releases and handle deleted tags
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        releases=$(gh release list --limit 1000 || true)
        if [ -n "$releases" ]; then
          echo "$releases" | grep -v "Nightly Build" | awk '{print $1, $3}' | while read -r tag rest; do
            if [[ ! $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] || ! git rev-parse "$tag" &>/dev/null; then
              gh release delete "$tag" --yes || true
            fi
          done
        else
          echo "No releases found to clean up."
        fi
name: Build and Release

on:
  push:
    tags:
      - 'v*'
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: arm64
          - os: ubuntu-latest
            arch: riscv64
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: arm64
          - os: windows-latest
            arch: x86_64

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: Build with PyInstaller
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.arch }}" = "riscv64" ]; then
          # Add RISC-V specific build steps here if needed
          pyinstaller --target-arch riscv64 ParticlePlayground.spec
        else
          pyinstaller ParticlePlayground.spec
        fi
      shell: bash

    - name: Copy LICENSE files
      run: |
        cp LICENSE dist/
        mkdir -p dist/assets
        cp assets/LICENSE dist/assets/
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ParticlePlayground-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v3

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Upload Release Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        for artifact in artifacts/*; do
          for file in "$artifact"/*; do
            gh release upload ${{ github.ref_name }} "$file" --clobber
          done
        done

  cleanup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Remove invalid releases
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        for release in $(gh release list --limit 1000 | grep -v "Nightly Build" | awk '{print $1, $3}'); do
          tag=$(echo $release | cut -d' ' -f2)
          if [[ ! $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            gh release delete $tag --yes
          fi
        done

  nightly:
    needs: [build, cleanup]
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v3

    - name: Get latest commit hash
      id: get_hash
      run: echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Check for existing nightly tag
      id: check_tag
      run: |
        git fetch --tags
        if git rev-parse nightly >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "current_hash=$(git rev-parse nightly)" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Update or create nightly tag
      if: steps.check_tag.outputs.exists != 'true' || steps.check_tag.outputs.current_hash != steps.get_hash.outputs.hash
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -f nightly
        git push origin nightly -f

    - name: Create Nightly Release
      if: steps.check_tag.outputs.exists != 'true' || steps.check_tag.outputs.current_hash != steps.get_hash.outputs.hash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create nightly --title "Nightly Build" --notes "Automated nightly build" --prerelease

    - uses: actions/download-artifact@v3
      if: steps.check_tag.outputs.exists != 'true' || steps.check_tag.outputs.current_hash != steps.get_hash.outputs.hash
      with:
        path: artifacts

    - name: Upload Nightly Release Assets
      if: steps.check_tag.outputs.exists != 'true' || steps.check_tag.outputs.current_hash != steps.get_hash.outputs.hash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        for artifact in artifacts/*; do
          for file in "$artifact"/*; do
            gh release upload nightly "$file" --clobber
          done
        done
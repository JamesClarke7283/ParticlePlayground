name: Build and Release

on:
  push:
    tags:
      - 'v*'
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64  # Windows doesn't support ARM64 builds natively in Actions

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches

    - name: Set up Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: Build with PyInstaller
      run: pyinstaller ParticlePlayground.spec

    - name: Copy LICENSE files
      run: |
        cp LICENSE dist/
        mkdir -p dist/assets
        cp assets/LICENSE dist/assets/
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ParticlePlayground-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/ParticlePlayground*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - uses: actions/download-artifact@v2

    - name: Upload Release Assets
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          const glob = require('glob');
          
          const assets = glob.sync('**/ParticlePlayground*');
          for (const asset of assets) {
            const fileName = asset.split('/').pop();
            await github.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.id }},
              name: fileName,
              data: await fs.readFile(asset)
            });
          }

  cleanup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Remove invalid releases
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const releases = await github.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          for (const release of releases.data) {
            if (release.tag_name === 'nightly') continue;
            if (!release.tag_name.startsWith('v')) {
              await github.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id
              });
              continue;
            }
            
            try {
              await github.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${release.tag_name}`
              });
            } catch (error) {
              if (error.status === 404) {
                await github.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
              }
            }
          }

  nightly:
    needs: [build, cleanup]
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v2

    - name: Get latest commit hash
      id: get_hash
      run: echo "::set-output name=hash::$(git rev-parse HEAD)"

    - name: Check for existing nightly tag
      id: check_tag
      run: |
        git fetch --tags
        if git rev-parse nightly >/dev/null 2>&1; then
          echo "::set-output name=exists::true"
          echo "::set-output name=current_hash::$(git rev-parse nightly)"
        else
          echo "::set-output name=exists::false"
        fi

    - name: Update or create nightly tag
      if: steps.check_tag.outputs.exists != 'true' || steps.check_tag.outputs.current_hash != steps.get_hash.outputs.hash
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -f nightly
        git push origin nightly -f

    - name: Create Nightly Release
      if: steps.check_tag.outputs.exists != 'true' || steps.check_tag.outputs.current_hash != steps.get_hash.outputs.hash
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: nightly
        release_name: Nightly Build
        draft: false
        prerelease: true

    - uses: actions/download-artifact@v2
      if: steps.check_tag.outputs.exists != 'true' || steps.check_tag.outputs.current_hash != steps.get_hash.outputs.hash

    - name: Upload Nightly Release Assets
      if: steps.check_tag.outputs.exists != 'true' || steps.check_tag.outputs.current_hash != steps.get_hash.outputs.hash
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          const glob = require('glob');
          
          const assets = glob.sync('**/ParticlePlayground*');
          for (const asset of assets) {
            const fileName = asset.split('/').pop();
            await github.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.id }},
              name: fileName,
              data: await fs.readFile(asset)
            });
          }
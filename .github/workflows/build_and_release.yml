name: Build and Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  delete:
    tags:
      - 'v*'
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: arm64
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: arm64
          - os: windows-latest
            arch: x86_64

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: Build with PyInstaller
      run: pyinstaller ParticlePlayground.spec

    - name: Rename and checksum artifacts
      run: |
        cd dist
        main_file=$(ls ParticlePlayground* | grep -v "LICENSE")
        new_name="ParticlePlayground_${{ matrix.os }}-${{ matrix.arch }}${main_file##ParticlePlayground}"
        mv "$main_file" "$new_name"
        sha256sum "$new_name" > "${new_name}.sha256"
      shell: bash

    - name: Install GitHub CLI
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
        elif [ "${{ runner.os }}" = "macOS" ]; then
          brew install gh
        else
          choco install gh
        fi
      shell: bash

    - name: Upload to Release
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        release_tag="${GITHUB_REF#refs/tags/}"
        if ! gh release view "$release_tag" &>/dev/null; then
          gh release create "$release_tag" --title "Release $release_tag" --notes "Release $release_tag"
        else
          gh release edit "$release_tag" --title "Release $release_tag" --notes "Release $release_tag"
        fi
        gh release upload "$release_tag" dist/ParticlePlayground_* --clobber
      shell: bash

    - name: Upload to Nightly
      if: github.event_name == 'schedule'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        last_commit=$(git rev-parse HEAD)
        last_nightly=$(git rev-parse nightly 2>/dev/null || echo '')
        if [ "$last_commit" != "$last_nightly" ]; then
          if ! gh release view nightly &>/dev/null; then
            gh release create nightly --title "Nightly Build" --notes "Automated nightly build" --prerelease
          else
            gh release edit nightly --title "Nightly Build" --notes "Updated nightly build"
          fi
          gh release upload nightly dist/ParticlePlayground_* --clobber
          git tag -f nightly
          git push origin nightly -f
        else
          echo "No new commits since last nightly build. Skipping."
        fi
      shell: bash

  cleanup:
    runs-on: ubuntu-latest
    needs: build-and-release
    if: always()
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh -y

    - name: Remove invalid releases and handle deleted tags
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        releases=$(gh release list --limit 1000 || true)
        if [ -n "$releases" ]; then
          echo "$releases" | grep -v "Nightly Build" | awk '{print $1, $3}' | while read -r tag rest; do
            if [[ ! $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] || ! git rev-parse "$tag" &>/dev/null; then
              gh release delete "$tag" --yes || true
            fi
          done
        else
          echo "No releases found to clean up."
        fi